// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/TgBotDB.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fTgBotDB_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fTgBotDB_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fTgBotDB_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fTgBotDB_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_proto_2fTgBotDB_2eproto;
namespace tgbot {
namespace proto {
class Database;
struct DatabaseDefaultTypeInternal;
extern DatabaseDefaultTypeInternal _Database_default_instance_;
class MediaToName;
struct MediaToNameDefaultTypeInternal;
extern MediaToNameDefaultTypeInternal _MediaToName_default_instance_;
class PersonList;
struct PersonListDefaultTypeInternal;
extern PersonListDefaultTypeInternal _PersonList_default_instance_;
}  // namespace proto
}  // namespace tgbot
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tgbot {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class PersonList final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tgbot.proto.PersonList) */ {
 public:
  inline PersonList() : PersonList(nullptr) {}
  ~PersonList() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PersonList(
      ::google::protobuf::internal::ConstantInitialized);

  inline PersonList(const PersonList& from) : PersonList(nullptr, from) {}
  inline PersonList(PersonList&& from) noexcept
      : PersonList(nullptr, std::move(from)) {}
  inline PersonList& operator=(const PersonList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PersonList& operator=(PersonList&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PersonList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PersonList* internal_default_instance() {
    return reinterpret_cast<const PersonList*>(
        &_PersonList_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PersonList& a, PersonList& b) { a.Swap(&b); }
  inline void Swap(PersonList* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PersonList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PersonList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PersonList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PersonList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PersonList& from) { PersonList::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PersonList* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tgbot.proto.PersonList"; }

 protected:
  explicit PersonList(::google::protobuf::Arena* arena);
  PersonList(::google::protobuf::Arena* arena, const PersonList& from);
  PersonList(::google::protobuf::Arena* arena, PersonList&& from) noexcept
      : PersonList(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // repeated int64 id = 1;
  int id_size() const;
  private:
  int _internal_id_size() const;

  public:
  void clear_id() ;
  ::int64_t id(int index) const;
  void set_id(int index, ::int64_t value);
  void add_id(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& id() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_id();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_id() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:tgbot.proto.PersonList)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fTgBotDB_2eproto;
};
// -------------------------------------------------------------------

class MediaToName final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tgbot.proto.MediaToName) */ {
 public:
  inline MediaToName() : MediaToName(nullptr) {}
  ~MediaToName() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MediaToName(
      ::google::protobuf::internal::ConstantInitialized);

  inline MediaToName(const MediaToName& from) : MediaToName(nullptr, from) {}
  inline MediaToName(MediaToName&& from) noexcept
      : MediaToName(nullptr, std::move(from)) {}
  inline MediaToName& operator=(const MediaToName& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaToName& operator=(MediaToName&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MediaToName& default_instance() {
    return *internal_default_instance();
  }
  static inline const MediaToName* internal_default_instance() {
    return reinterpret_cast<const MediaToName*>(
        &_MediaToName_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MediaToName& a, MediaToName& b) { a.Swap(&b); }
  inline void Swap(MediaToName* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaToName* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MediaToName* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MediaToName>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MediaToName& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MediaToName& from) { MediaToName::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MediaToName* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tgbot.proto.MediaToName"; }

 protected:
  explicit MediaToName(::google::protobuf::Arena* arena);
  MediaToName(::google::protobuf::Arena* arena, const MediaToName& from);
  MediaToName(::google::protobuf::Arena* arena, MediaToName&& from) noexcept
      : MediaToName(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNamesFieldNumber = 3,
    kTelegramMediaUniqueIdFieldNumber = 1,
    kTelegramMediaIdFieldNumber = 2,
  };
  // repeated string Names = 3;
  int names_size() const;
  private:
  int _internal_names_size() const;

  public:
  void clear_names() ;
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, std::size_t size);
  void set_names(int index, absl::string_view value);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, std::size_t size);
  void add_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_names();

  public:
  // optional string TelegramMediaUniqueId = 1;
  bool has_telegrammediauniqueid() const;
  void clear_telegrammediauniqueid() ;
  const std::string& telegrammediauniqueid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_telegrammediauniqueid(Arg_&& arg, Args_... args);
  std::string* mutable_telegrammediauniqueid();
  PROTOBUF_NODISCARD std::string* release_telegrammediauniqueid();
  void set_allocated_telegrammediauniqueid(std::string* value);

  private:
  const std::string& _internal_telegrammediauniqueid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telegrammediauniqueid(
      const std::string& value);
  std::string* _internal_mutable_telegrammediauniqueid();

  public:
  // optional string TelegramMediaId = 2;
  bool has_telegrammediaid() const;
  void clear_telegrammediaid() ;
  const std::string& telegrammediaid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_telegrammediaid(Arg_&& arg, Args_... args);
  std::string* mutable_telegrammediaid();
  PROTOBUF_NODISCARD std::string* release_telegrammediaid();
  void set_allocated_telegrammediaid(std::string* value);

  private:
  const std::string& _internal_telegrammediaid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_telegrammediaid(
      const std::string& value);
  std::string* _internal_mutable_telegrammediaid();

  public:
  // @@protoc_insertion_point(class_scope:tgbot.proto.MediaToName)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      73, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> names_;
    ::google::protobuf::internal::ArenaStringPtr telegrammediauniqueid_;
    ::google::protobuf::internal::ArenaStringPtr telegrammediaid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fTgBotDB_2eproto;
};
// -------------------------------------------------------------------

class Database final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tgbot.proto.Database) */ {
 public:
  inline Database() : Database(nullptr) {}
  ~Database() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Database(
      ::google::protobuf::internal::ConstantInitialized);

  inline Database(const Database& from) : Database(nullptr, from) {}
  inline Database(Database&& from) noexcept
      : Database(nullptr, std::move(from)) {}
  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }
  inline Database& operator=(Database&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Database& default_instance() {
    return *internal_default_instance();
  }
  static inline const Database* internal_default_instance() {
    return reinterpret_cast<const Database*>(
        &_Database_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Database& a, Database& b) { a.Swap(&b); }
  inline void Swap(Database* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Database* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Database* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Database>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Database& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Database& from) { Database::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Database* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "tgbot.proto.Database"; }

 protected:
  explicit Database(::google::protobuf::Arena* arena);
  Database(::google::protobuf::Arena* arena, const Database& from);
  Database(::google::protobuf::Arena* arena, Database&& from) noexcept
      : Database(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMediaToNamesFieldNumber = 4,
    kWhitelistFieldNumber = 2,
    kBlacklistFieldNumber = 3,
    kOwnerIdFieldNumber = 1,
  };
  // repeated .tgbot.proto.MediaToName mediaToNames = 4;
  int mediatonames_size() const;
  private:
  int _internal_mediatonames_size() const;

  public:
  void clear_mediatonames() ;
  ::tgbot::proto::MediaToName* mutable_mediatonames(int index);
  ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>* mutable_mediatonames();

  private:
  const ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>& _internal_mediatonames() const;
  ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>* _internal_mutable_mediatonames();
  public:
  const ::tgbot::proto::MediaToName& mediatonames(int index) const;
  ::tgbot::proto::MediaToName* add_mediatonames();
  const ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>& mediatonames() const;
  // optional .tgbot.proto.PersonList whitelist = 2;
  bool has_whitelist() const;
  void clear_whitelist() ;
  const ::tgbot::proto::PersonList& whitelist() const;
  PROTOBUF_NODISCARD ::tgbot::proto::PersonList* release_whitelist();
  ::tgbot::proto::PersonList* mutable_whitelist();
  void set_allocated_whitelist(::tgbot::proto::PersonList* value);
  void unsafe_arena_set_allocated_whitelist(::tgbot::proto::PersonList* value);
  ::tgbot::proto::PersonList* unsafe_arena_release_whitelist();

  private:
  const ::tgbot::proto::PersonList& _internal_whitelist() const;
  ::tgbot::proto::PersonList* _internal_mutable_whitelist();

  public:
  // optional .tgbot.proto.PersonList blacklist = 3;
  bool has_blacklist() const;
  void clear_blacklist() ;
  const ::tgbot::proto::PersonList& blacklist() const;
  PROTOBUF_NODISCARD ::tgbot::proto::PersonList* release_blacklist();
  ::tgbot::proto::PersonList* mutable_blacklist();
  void set_allocated_blacklist(::tgbot::proto::PersonList* value);
  void unsafe_arena_set_allocated_blacklist(::tgbot::proto::PersonList* value);
  ::tgbot::proto::PersonList* unsafe_arena_release_blacklist();

  private:
  const ::tgbot::proto::PersonList& _internal_blacklist() const;
  ::tgbot::proto::PersonList* _internal_mutable_blacklist();

  public:
  // optional int64 ownerId = 1;
  bool has_ownerid() const;
  void clear_ownerid() ;
  ::int64_t ownerid() const;
  void set_ownerid(::int64_t value);

  private:
  ::int64_t _internal_ownerid() const;
  void _internal_set_ownerid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tgbot.proto.Database)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tgbot::proto::MediaToName > mediatonames_;
    ::tgbot::proto::PersonList* whitelist_;
    ::tgbot::proto::PersonList* blacklist_;
    ::int64_t ownerid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fTgBotDB_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PersonList

// repeated int64 id = 1;
inline int PersonList::_internal_id_size() const {
  return _internal_id().size();
}
inline int PersonList::id_size() const {
  return _internal_id_size();
}
inline void PersonList::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.Clear();
}
inline ::int64_t PersonList::id(int index) const {
  // @@protoc_insertion_point(field_get:tgbot.proto.PersonList.id)
  return _internal_id().Get(index);
}
inline void PersonList::set_id(int index, ::int64_t value) {
  _internal_mutable_id()->Set(index, value);
  // @@protoc_insertion_point(field_set:tgbot.proto.PersonList.id)
}
inline void PersonList::add_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_id()->Add(value);
  // @@protoc_insertion_point(field_add:tgbot.proto.PersonList.id)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& PersonList::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tgbot.proto.PersonList.id)
  return _internal_id();
}
inline ::google::protobuf::RepeatedField<::int64_t>* PersonList::mutable_id()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tgbot.proto.PersonList.id)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_id();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
PersonList::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* PersonList::_internal_mutable_id() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.id_;
}

// -------------------------------------------------------------------

// MediaToName

// optional string TelegramMediaUniqueId = 1;
inline bool MediaToName::has_telegrammediauniqueid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MediaToName::clear_telegrammediauniqueid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.telegrammediauniqueid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MediaToName::telegrammediauniqueid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tgbot.proto.MediaToName.TelegramMediaUniqueId)
  return _internal_telegrammediauniqueid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MediaToName::set_telegrammediauniqueid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.telegrammediauniqueid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tgbot.proto.MediaToName.TelegramMediaUniqueId)
}
inline std::string* MediaToName::mutable_telegrammediauniqueid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_telegrammediauniqueid();
  // @@protoc_insertion_point(field_mutable:tgbot.proto.MediaToName.TelegramMediaUniqueId)
  return _s;
}
inline const std::string& MediaToName::_internal_telegrammediauniqueid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.telegrammediauniqueid_.Get();
}
inline void MediaToName::_internal_set_telegrammediauniqueid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.telegrammediauniqueid_.Set(value, GetArena());
}
inline std::string* MediaToName::_internal_mutable_telegrammediauniqueid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.telegrammediauniqueid_.Mutable( GetArena());
}
inline std::string* MediaToName::release_telegrammediauniqueid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tgbot.proto.MediaToName.TelegramMediaUniqueId)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.telegrammediauniqueid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.telegrammediauniqueid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MediaToName::set_allocated_telegrammediauniqueid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.telegrammediauniqueid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.telegrammediauniqueid_.IsDefault()) {
          _impl_.telegrammediauniqueid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tgbot.proto.MediaToName.TelegramMediaUniqueId)
}

// optional string TelegramMediaId = 2;
inline bool MediaToName::has_telegrammediaid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MediaToName::clear_telegrammediaid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.telegrammediaid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MediaToName::telegrammediaid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tgbot.proto.MediaToName.TelegramMediaId)
  return _internal_telegrammediaid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MediaToName::set_telegrammediaid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.telegrammediaid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tgbot.proto.MediaToName.TelegramMediaId)
}
inline std::string* MediaToName::mutable_telegrammediaid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_telegrammediaid();
  // @@protoc_insertion_point(field_mutable:tgbot.proto.MediaToName.TelegramMediaId)
  return _s;
}
inline const std::string& MediaToName::_internal_telegrammediaid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.telegrammediaid_.Get();
}
inline void MediaToName::_internal_set_telegrammediaid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.telegrammediaid_.Set(value, GetArena());
}
inline std::string* MediaToName::_internal_mutable_telegrammediaid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.telegrammediaid_.Mutable( GetArena());
}
inline std::string* MediaToName::release_telegrammediaid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tgbot.proto.MediaToName.TelegramMediaId)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.telegrammediaid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.telegrammediaid_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MediaToName::set_allocated_telegrammediaid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.telegrammediaid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.telegrammediaid_.IsDefault()) {
          _impl_.telegrammediaid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tgbot.proto.MediaToName.TelegramMediaId)
}

// repeated string Names = 3;
inline int MediaToName::_internal_names_size() const {
  return _internal_names().size();
}
inline int MediaToName::names_size() const {
  return _internal_names_size();
}
inline void MediaToName::clear_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.names_.Clear();
}
inline std::string* MediaToName::add_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:tgbot.proto.MediaToName.Names)
  return _s;
}
inline const std::string& MediaToName::names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tgbot.proto.MediaToName.Names)
  return _internal_names().Get(index);
}
inline std::string* MediaToName::mutable_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tgbot.proto.MediaToName.Names)
  return _internal_mutable_names()->Mutable(index);
}
inline void MediaToName::set_names(int index, const std::string& value) {
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::set_names(int index, std::string&& value) {
  _internal_mutable_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::set_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::set_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::set_names(int index, absl::string_view value) {
  _internal_mutable_names()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::add_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::add_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::add_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::add_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tgbot.proto.MediaToName.Names)
}
inline void MediaToName::add_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_names()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:tgbot.proto.MediaToName.Names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MediaToName::names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tgbot.proto.MediaToName.Names)
  return _internal_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MediaToName::mutable_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tgbot.proto.MediaToName.Names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
MediaToName::_internal_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
MediaToName::_internal_mutable_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.names_;
}

// -------------------------------------------------------------------

// Database

// optional int64 ownerId = 1;
inline bool Database::has_ownerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Database::clear_ownerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ownerid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Database::ownerid() const {
  // @@protoc_insertion_point(field_get:tgbot.proto.Database.ownerId)
  return _internal_ownerid();
}
inline void Database::set_ownerid(::int64_t value) {
  _internal_set_ownerid(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:tgbot.proto.Database.ownerId)
}
inline ::int64_t Database::_internal_ownerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ownerid_;
}
inline void Database::_internal_set_ownerid(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ownerid_ = value;
}

// optional .tgbot.proto.PersonList whitelist = 2;
inline bool Database::has_whitelist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.whitelist_ != nullptr);
  return value;
}
inline void Database::clear_whitelist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.whitelist_ != nullptr) _impl_.whitelist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tgbot::proto::PersonList& Database::_internal_whitelist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tgbot::proto::PersonList* p = _impl_.whitelist_;
  return p != nullptr ? *p : reinterpret_cast<const ::tgbot::proto::PersonList&>(::tgbot::proto::_PersonList_default_instance_);
}
inline const ::tgbot::proto::PersonList& Database::whitelist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tgbot.proto.Database.whitelist)
  return _internal_whitelist();
}
inline void Database::unsafe_arena_set_allocated_whitelist(::tgbot::proto::PersonList* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.whitelist_);
  }
  _impl_.whitelist_ = reinterpret_cast<::tgbot::proto::PersonList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tgbot.proto.Database.whitelist)
}
inline ::tgbot::proto::PersonList* Database::release_whitelist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tgbot::proto::PersonList* released = _impl_.whitelist_;
  _impl_.whitelist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tgbot::proto::PersonList* Database::unsafe_arena_release_whitelist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tgbot.proto.Database.whitelist)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tgbot::proto::PersonList* temp = _impl_.whitelist_;
  _impl_.whitelist_ = nullptr;
  return temp;
}
inline ::tgbot::proto::PersonList* Database::_internal_mutable_whitelist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.whitelist_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tgbot::proto::PersonList>(GetArena());
    _impl_.whitelist_ = reinterpret_cast<::tgbot::proto::PersonList*>(p);
  }
  return _impl_.whitelist_;
}
inline ::tgbot::proto::PersonList* Database::mutable_whitelist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tgbot::proto::PersonList* _msg = _internal_mutable_whitelist();
  // @@protoc_insertion_point(field_mutable:tgbot.proto.Database.whitelist)
  return _msg;
}
inline void Database::set_allocated_whitelist(::tgbot::proto::PersonList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.whitelist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.whitelist_ = reinterpret_cast<::tgbot::proto::PersonList*>(value);
  // @@protoc_insertion_point(field_set_allocated:tgbot.proto.Database.whitelist)
}

// optional .tgbot.proto.PersonList blacklist = 3;
inline bool Database::has_blacklist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blacklist_ != nullptr);
  return value;
}
inline void Database::clear_blacklist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.blacklist_ != nullptr) _impl_.blacklist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tgbot::proto::PersonList& Database::_internal_blacklist() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::tgbot::proto::PersonList* p = _impl_.blacklist_;
  return p != nullptr ? *p : reinterpret_cast<const ::tgbot::proto::PersonList&>(::tgbot::proto::_PersonList_default_instance_);
}
inline const ::tgbot::proto::PersonList& Database::blacklist() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tgbot.proto.Database.blacklist)
  return _internal_blacklist();
}
inline void Database::unsafe_arena_set_allocated_blacklist(::tgbot::proto::PersonList* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.blacklist_);
  }
  _impl_.blacklist_ = reinterpret_cast<::tgbot::proto::PersonList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tgbot.proto.Database.blacklist)
}
inline ::tgbot::proto::PersonList* Database::release_blacklist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tgbot::proto::PersonList* released = _impl_.blacklist_;
  _impl_.blacklist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::tgbot::proto::PersonList* Database::unsafe_arena_release_blacklist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:tgbot.proto.Database.blacklist)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tgbot::proto::PersonList* temp = _impl_.blacklist_;
  _impl_.blacklist_ = nullptr;
  return temp;
}
inline ::tgbot::proto::PersonList* Database::_internal_mutable_blacklist() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.blacklist_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tgbot::proto::PersonList>(GetArena());
    _impl_.blacklist_ = reinterpret_cast<::tgbot::proto::PersonList*>(p);
  }
  return _impl_.blacklist_;
}
inline ::tgbot::proto::PersonList* Database::mutable_blacklist() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tgbot::proto::PersonList* _msg = _internal_mutable_blacklist();
  // @@protoc_insertion_point(field_mutable:tgbot.proto.Database.blacklist)
  return _msg;
}
inline void Database::set_allocated_blacklist(::tgbot::proto::PersonList* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.blacklist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.blacklist_ = reinterpret_cast<::tgbot::proto::PersonList*>(value);
  // @@protoc_insertion_point(field_set_allocated:tgbot.proto.Database.blacklist)
}

// repeated .tgbot.proto.MediaToName mediaToNames = 4;
inline int Database::_internal_mediatonames_size() const {
  return _internal_mediatonames().size();
}
inline int Database::mediatonames_size() const {
  return _internal_mediatonames_size();
}
inline void Database::clear_mediatonames() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mediatonames_.Clear();
}
inline ::tgbot::proto::MediaToName* Database::mutable_mediatonames(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tgbot.proto.Database.mediaToNames)
  return _internal_mutable_mediatonames()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>* Database::mutable_mediatonames()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tgbot.proto.Database.mediaToNames)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_mediatonames();
}
inline const ::tgbot::proto::MediaToName& Database::mediatonames(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tgbot.proto.Database.mediaToNames)
  return _internal_mediatonames().Get(index);
}
inline ::tgbot::proto::MediaToName* Database::add_mediatonames() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::tgbot::proto::MediaToName* _add = _internal_mutable_mediatonames()->Add();
  // @@protoc_insertion_point(field_add:tgbot.proto.Database.mediaToNames)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>& Database::mediatonames() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tgbot.proto.Database.mediaToNames)
  return _internal_mediatonames();
}
inline const ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>&
Database::_internal_mediatonames() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mediatonames_;
}
inline ::google::protobuf::RepeatedPtrField<::tgbot::proto::MediaToName>*
Database::_internal_mutable_mediatonames() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.mediatonames_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace tgbot


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fTgBotDB_2eproto_2epb_2eh
