#pragma once

#ifdef __cpp_lib_expected
#error "Use C++ standard expected header instead"
#endif

#include <exception>
#include <functional>
#include <stdexcept>
#include <type_traits>
#include <utility>
#include <variant>

#define __cpp_lib_expected 202211L

// Let's say, a compat interface.
namespace std_cpp20 {

// Definition of `bad_expected_access`
template <class E>
class bad_expected_access : public std::exception {
    E e;

   public:
    explicit bad_expected_access(E e) : e(std::move(e)) {}

    const char* what() const noexcept override { return "bad expected access"; }

    const E& error() const& noexcept { return e; }
    E& error() & noexcept { return e; }
    const E&& error() const&& noexcept { return std::move(e); }
    E&& error() && noexcept { return std::move(e); }
};

// Definition of `unexpected`
template <class E>
class unexpected {
   public:
    constexpr unexpected(const unexpected&) = default;
    constexpr unexpected(unexpected&&) = default;

    template <class Err = E>
        requires(!std::is_same_v<std::remove_cvref_t<Err>, unexpected> &&
                 !std::is_same_v<std::remove_cvref_t<Err>, std::in_place_t> &&
                 std::is_constructible_v<E, Err>)
    constexpr explicit unexpected(Err&& e) : _M_error(std::forward<Err>(e)) {}

    template <class... Args>
        requires(std::is_constructible_v<E, Args...>)
    constexpr explicit unexpected(std::in_place_t, Args&&... args)
        : _M_error(E(std::forward<Args>(args)...)) {}

    template <class U, class... Args>
        requires(std::is_constructible_v<E, std::initializer_list<U>&, Args...>)
    constexpr explicit unexpected(std::in_place_t, std::initializer_list<U> il,
                                  Args&&... args)
        : _M_error(il, std::forward<Args>(args)...) {}

    constexpr const E& error() const& noexcept { return _M_error; }
    constexpr E& error() & noexcept { return _M_error; }
    constexpr const E&& error() const&& noexcept { return std::move(_M_error); }
    constexpr E&& error() && noexcept { return std::move(_M_error); }

    constexpr bool operator==(const unexpected& other) const noexcept {
        return _M_error == other._M_error;
    }

    constexpr bool operator!=(const unexpected& other) const noexcept {
        return !(*this == other);
    }

    constexpr void swap(unexpected& other) noexcept(
        std::is_nothrow_swappable_v<E>) {
        using std::swap;
        swap(_M_error, other._M_error);
    }

   private:
    E _M_error;
};

// Definition of `unexpect_t` for `std::in_place` construction of errors
struct unexpect_t {
    explicit unexpect_t() = default;
};
inline constexpr unexpect_t unexpect{};

// Definition of `expected`
template <class T, class E>
class expected {
   public:
    using value_type = T;
    using error_type = E;
    using unexpected_type = unexpected<E>;

    // Default constructor (requires default constructible T)
    constexpr expected()
        requires(std::is_default_constructible_v<T>)
        : _M_has_value(true), _M_value(T{}) {}

    // Value constructor
    template <class U = T>
    constexpr explicit(!std::is_convertible_v<U, T>) expected(U&& v)
        : _M_has_value(true), _M_value(std::forward<U>(v)) {}

    // Error constructor
    template <class G>
    constexpr explicit(!std::is_convertible_v<const G&, E>)
        expected(const unexpected<G>& e)
        : _M_has_value(false), _M_value(e.error()) {}

    template <class G>
    constexpr explicit(!std::is_convertible_v<G, E>) expected(unexpected<G>&& e)
        : _M_has_value(false), _M_value(std::move(e.error())) {}

    // In-place value construction
    template <class... Args>
    constexpr explicit expected(std::in_place_t, Args&&... args)
        : _M_has_value(true), _M_value(T(std::forward<Args>(args)...)) {}

    // In-place value construction with initializer list
    template <class U, class... Args>
    constexpr explicit expected(std::in_place_t, std::initializer_list<U> il,
                                Args&&... args)
        : _M_has_value(true), _M_value(T(il, std::forward<Args>(args)...)) {}

    // In-place error construction
    template <class... Args>
    constexpr explicit expected(unexpect_t, Args&&... args)
        : _M_has_value(false), _M_value(E(std::forward<Args>(args)...)) {}

    // In-place error construction with initializer list
    template <class U, class... Args>
    constexpr explicit expected(unexpect_t, std::initializer_list<U> il,
                                Args&&... args)
        : _M_has_value(false), _M_value(E(il, std::forward<Args>(args)...)) {}

    // Copy constructor
    constexpr expected(const expected& other) = default;

    // Move constructor
    constexpr expected(expected&& other) = default;

    // Accessors
    constexpr bool has_value() const noexcept { return _M_has_value; }

    constexpr const T& value() const& {
        if (!_M_has_value) throw bad_expected_access<E>(std::get<E>(_M_value));
        return std::get<T>(_M_value);
    }

    constexpr T& value() & {
        if (!_M_has_value) throw bad_expected_access<E>(std::get<E>(_M_value));
        return std::get<T>(_M_value);
    }

    constexpr const T&& value() const&& {
        if (!_M_has_value) throw bad_expected_access<E>(std::get<E>(_M_value));
        return std::move(std::get<T>(_M_value));
    }

    constexpr T&& value() && {
        if (!_M_has_value) throw bad_expected_access<E>(std::get<E>(_M_value));
        return std::move(std::get<T>(_M_value));
    }

    constexpr const E& error() const& {
        if (_M_has_value) throw std::logic_error("No error present.");
        return std::get<E>(_M_value);
    }

    constexpr E& error() & {
        if (_M_has_value) throw std::logic_error("No error present.");
        return std::get<E>(_M_value);
    }

    constexpr const E&& error() const&& {
        if (_M_has_value) throw std::logic_error("No error present.");
        return std::move(std::get<E>(_M_value));
    }

    constexpr E&& error() && {
        if (_M_has_value) throw std::logic_error("No error present.");
        return std::move(std::get<E>(_M_value));
    }

    // value_or - Returns the value if present, otherwise returns the provided
    // alternative
    template <class U>
    constexpr T value_or(U&& default_value) const& {
        return _M_has_value ? value()
                            : static_cast<T>(std::forward<U>(default_value));
    }

    template <class U>
    constexpr T value_or(U&& default_value) && {
        return _M_has_value ? std::move(value())
                            : static_cast<T>(std::forward<U>(default_value));
    }

    // error_or - Returns the error if present, otherwise returns the provided
    // alternative
    template <class G>
    constexpr E error_or(G&& default_error) const& {
        return _M_has_value ? static_cast<E>(std::forward<G>(default_error))
                            : error();
    }

    template <class G>
    constexpr E error_or(G&& default_error) && {
        return _M_has_value ? static_cast<E>(std::forward<G>(default_error))
                            : std::move(error());
    }

    // Monadic operation: and_then
    template <class F>
    constexpr auto and_then(F&& func) & {
        using Result = std::invoke_result_t<F, T&>;
        return _M_has_value ? std::invoke(std::forward<F>(func), value())
                            : Result(unexpect, error());
    }

    template <class F>
    constexpr auto and_then(F&& func) const& {
        using Result = std::invoke_result_t<F, const T&>;
        return _M_has_value ? std::invoke(std::forward<F>(func), value())
                            : Result(unexpect, error());
    }

    template <class F>
    constexpr auto and_then(F&& func) && {
        using Result = std::invoke_result_t<F, T&&>;
        return _M_has_value
                   ? std::invoke(std::forward<F>(func), std::move(value()))
                   : Result(unexpect, std::move(error()));
    }

    // Monadic operation: transform
    template <class F>
    constexpr auto transform(F&& func) & {
        using Result = expected<std::invoke_result_t<F, T&>, E>;
        return _M_has_value
                   ? Result(std::invoke(std::forward<F>(func), value()))
                   : Result(unexpect, error());
    }

    template <class F>
    constexpr auto transform(F&& func) const& {
        using Result = expected<std::invoke_result_t<F, const T&>, E>;
        return _M_has_value
                   ? Result(std::invoke(std::forward<F>(func), value()))
                   : Result(unexpect, error());
    }

    template <class F>
    constexpr auto transform(F&& func) && {
        using Result = expected<std::invoke_result_t<F, T&&>, E>;
        return _M_has_value ? Result(std::invoke(std::forward<F>(func),
                                                 std::move(value())))
                            : Result(unexpect, std::move(error()));
    }

    // Monadic operation: or_else
    template <class F>
    constexpr auto or_else(F&& func) & {
        return _M_has_value ? *this
                            : std::invoke(std::forward<F>(func), error());
    }

    template <class F>
    constexpr auto or_else(F&& func) const& {
        return _M_has_value ? *this
                            : std::invoke(std::forward<F>(func), error());
    }

    template <class F>
    constexpr auto or_else(F&& func) && {
        return _M_has_value
                   ? *this
                   : std::invoke(std::forward<F>(func), std::move(error()));
    }

    // Monadic operation: transform_error
    template <class F>
    constexpr auto transform_error(F&& func) & {
        using Result = expected<T, std::invoke_result_t<F, E&>>;
        return _M_has_value
                   ? *this
                   : Result(unexpect,
                            std::invoke(std::forward<F>(func), error()));
    }

    template <class F>
    constexpr auto transform_error(F&& func) const& {
        using Result = expected<T, std::invoke_result_t<F, const E&>>;
        return _M_has_value
                   ? *this
                   : Result(unexpect,
                            std::invoke(std::forward<F>(func), error()));
    }

    template <class F>
    constexpr auto transform_error(F&& func) && {
        using Result = expected<T, std::invoke_result_t<F, E&&>>;
        return _M_has_value
                   ? *this
                   : Result(unexpect, std::invoke(std::forward<F>(func),
                                                  std::move(error())));
    }

    // Dereference operators for value access
    constexpr T& operator*() & { return value(); }
    constexpr const T& operator*() const& { return value(); }
    constexpr T&& operator*() && { return std::move(value()); }
    constexpr const T&& operator*() const&& { return std::move(value()); }

    constexpr T* operator->() { return &value(); }
    constexpr const T* operator->() const { return &value(); }

    // Comparison operators
    constexpr bool operator==(const expected& rhs) const {
        return (_M_has_value == rhs._M_has_value) &&
               (_M_has_value
                    ? (std::get<T>(_M_value) == std::get<T>(rhs._M_value))
                    : (std::get<E>(_M_value) == std::get<E>(rhs._M_value)));
    }

    constexpr bool operator!=(const expected& rhs) const {
        return !(*this == rhs);
    }

   private:
    bool _M_has_value;
    std::variant<T, E> _M_value;
};

// Deduction guide for `unexpected`
template <class E>
unexpected(E) -> unexpected<E>;

}  // namespace std_cpp20
