set(CMD_MODULES_SINGLE_LIST alive flash possibility decide delay decho randsticker fileid)
if (NOT WIN32)
set(CMD_MODULES_SINGLE_LIST ${CMD_MODULES_SINGLE_LIST} ibash)
endif()
set(CMD_MODULES_SOURCES_LIST database_impl bash_impl ${CMD_MODULES_SINGLE_LIST} timer_impl)
set(CMD_MODULES_LIST addblacklist rmblacklist addwhitelist 
			  rmwhitelist bash unsafebash ${CMD_MODULES_SINGLE_LIST}
			  starttimer stoptimer)

set(COMMANDS_CWD src/command_modules)
set(COMMANDS_GEN_HEADER ${CMAKE_BINARY_DIR}/${COMMANDS_CWD}/cmds.gen.h)
FILE(REMOVE ${COMMANDS_GEN_HEADER})
FILE(APPEND ${COMMANDS_GEN_HEADER} "#include <vector>\n")
FILE(APPEND ${COMMANDS_GEN_HEADER} "#include <command_modules/CommandModule.h>\n\n")
foreach(lib ${CMD_MODULES_LIST})
	FILE(APPEND ${COMMANDS_GEN_HEADER} "extern const struct CommandModule cmd_${lib};\n")
endforeach()
foreach(lib ${CMD_MODULES_SOURCES_LIST})
	set(CMDS_SRC_LIST ${CMDS_SRC_LIST} ${lib}.cpp)
endforeach()
FILE(APPEND ${COMMANDS_GEN_HEADER} "inline const std::vector gCmdModules = {\n")
foreach(lib ${CMD_MODULES_LIST})
	FILE(APPEND ${COMMANDS_GEN_HEADER} "   &cmd_${lib},\n")
endforeach()
FILE(APPEND ${COMMANDS_GEN_HEADER} "};\n")
add_library(TgBotCommandModules STATIC ${CMDS_SRC_LIST})
target_include_directories(TgBotCommandModules PUBLIC ${CMAKE_BINARY_DIR}/${COMMANDS_CWD})
target_link_libraries(TgBotCommandModules TgBot TgBotDB)